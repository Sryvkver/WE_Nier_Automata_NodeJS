{"version":3,"sources":["logo.svg","Main.js","websocket.js","Active_Tabs.js","SystemInfo.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Main","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","hours","Date","getHours","concat","minutes","getMinutes","state","time","_this2","timerID","setInterval","tick","setState","react_default","a","createElement","className","style","fontSize","marginBottom","margin","width","background","height","color","textAlign","overflow","display","marginTop","cursor","React","Component","ws","WebSocket","isReady","onOpen","window","clearInterval","console","log","readyState","onclose","onClose","onopen","getWs","ActiveTabs","tabs","getTabs","onmessage","that","ev","msg","data","startsWith","replace","JSON","parse","send","position","top","right","flexDirection","paddingRight","map","val","index","Fragment","key","id","float","maxWidth","textOverflow","whiteSpace","title","SystemInfo","systeminfo","cpuUsage","freeMemPercentage","totalMemory","usedMemory","getSystemInfo","Math","floor","toFixed","Boolean","location","hostname","match","ReactDOM","render","src_Main_0","document","getElementById","src_Active_Tabs","src_SystemInfo_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.55cc38d9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './Main.css';\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const hours = new Date().getHours() < 10 ? `0${new Date().getHours()}` : new Date().getHours();\n    const minutes = new Date().getMinutes() < 10 ? `0${new Date().getMinutes()}` : new Date().getMinutes();\n    this.state = { time: `${hours}:${minutes}` };\n  }\n\n\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.tick(),\n      1000,\n    );\n  }\n\n  tick() {\n    const hours = new Date().getHours() < 10 ? `0${new Date().getHours()}` : new Date().getHours();\n    const minutes = new Date().getMinutes() < 10 ? `0${new Date().getMinutes()}` : new Date().getMinutes();\n    this.setState({\n      time: `${hours}:${minutes}`,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App-header\">\n        <h1 style={{ fontSize: '3em', marginBottom: '5px' }}>{this.state.time}</h1>\n        <p style={{ margin: '0', fontSize: 'small' }}>Rustage - Shield Hero</p>\n        <div style={{ width: '25vw', background: '#bab5a1', height: '1.5vh' }}>\n          <div style={{\n            background: '#454138', width: '27%', color: '#bab5a1', textAlign: 'center', height: '100%', fontSize: '1.5vh', overflow: 'hidden',\n          }}\n          >\n            2:01 / 3:37\n          </div>\n        </div>\n        <div style={{ display: 'flex', marginTop: '10px' }}>\n          <div style={{ cursor: 'pointer' }}>\n            <i className=\"material-icons\" style={{ fontSize: '4vh' }}>\n              skip_previous\n            </i>\n          </div>\n          <div style={{ cursor: 'pointer' }}>\n            <i className=\"material-icons\" style={{ fontSize: '4vh' }}>\n              pause\n            </i>\n            <i className=\"material-icons\" style={{ display: 'none', fontSize: '4vh' }}>\n              play_arrow\n            </i>\n          </div>\n          <div style={{ cursor: 'pointer' }}>\n            <i className=\"material-icons\" style={{ fontSize: '4vh' }}>\n              skip_next\n            </i>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","let ws = new WebSocket('ws://127.0.0.1:8080');\nlet isReady = false;\n\nfunction onOpen() {\n  if (window.timerID) {\n    window.clearInterval(window.timerID);\n    window.timerID = 0;\n  }\n  console.log(ws.readyState);\n  isReady = true;\n}\n\nfunction onClose() {\n  isReady = false;\n  console.log('WEBSOCKET CLOSED!');\n  // ws.close();\n  ws = null;\n  // ws = new WebSocket('ws://127.0.0.1:8080');\n\n  if (!window.timerID) {\n    window.timerID = setInterval(() => {\n      console.log('Trying to start WS');\n      ws = new WebSocket('ws://127.0.0.1:8080');\n      ws.onclose = onClose;\n      ws.onopen = onOpen;\n    }, 5000);\n  }\n}\n\nfunction getWs() {\n  return ws;\n}\n\nws.onclose = onClose;\nws.onopen = onOpen;\n\n\nexport default getWs;\nexport { isReady };\n","import React from 'react';\nimport logo from './logo.svg';\nimport ws from './websocket';\nimport { isReady } from './websocket';\nimport './Active_Tabs.css';\n\nclass ActiveTabs extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tabs: [{}],\n    };\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.getTabs(),\n      1000,\n    );\n  }\n\n  async getTabs() {\n    if (!isReady) { return; }\n\n    // this.ws.send('GetData');\n    ws().onmessage = (function (that) {\n      return function (ev) {\n        let msg = ev.data;\n        // console.log(msg);\n\n        if (msg.startsWith('[Server]')) {\n          msg = msg.replace('[Server]', '');\n          const tabs = JSON.parse(msg);\n\n          that.setState({\n            tabs,\n          });\n        }\n      };\n    }(this));\n\n    ws().send('GetTabs');\n  }\n\n  render() {\n    return (\n      <figure style={{\n        position: 'absolute', top: '100px', right: '100px', height: '50vh', width: '10vw',\n      }}\n      >\n        <figcaption>\n          Active Tabs\n        </figcaption>\n        <section style={{\n          overflow: 'auto', display: 'flex', flexDirection: 'column', paddingRight: '5px',\n        }}\n        >\n          {this.state.tabs.map((val, index) => (\n            <React.Fragment key={val.id}>\n              <div style={{ fontSize: 'small' }}>\n                <p style={{ float: 'left' }}>{val.id}</p>\n                <p style={{\n                  float: 'right', maxWidth: '115px', textOverflow: 'ellipsis', overflow: 'hidden', whiteSpace: 'nowrap',\n                }}\n                >\n                  { val.title }\n\n                </p>\n              </div>\n              <hr />\n            </React.Fragment>\n          ))}\n        </section>\n      </figure>\n    );\n  }\n}\n\nexport default ActiveTabs;\n","import React from 'react';\nimport logo from './logo.svg';\nimport ws from './websocket';\nimport { isReady } from './websocket';\nimport './SystemInfo.css';\n\nclass SystemInfo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      systeminfo: {\n        cpuUsage: 0,\n        freeMemPercentage: 0,\n        totalMemory: 0,\n        usedMemory: 0,\n      },\n    };\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.getSystemInfo(),\n      1000,\n    );\n  }\n\n  async getSystemInfo() {\n    if (!isReady) { return; }\n    // this.ws.send('GetData');\n    ws().onmessage = (function (that) {\n      return function (ev) {\n        let msg = ev.data;\n        // console.log(msg);\n\n        if (msg.startsWith('[Server]')) {\n          msg = msg.replace('[Server]', '');\n          const systeminfo = JSON.parse(msg);\n\n          that.setState({\n            systeminfo,\n          });\n        }\n      };\n    }(this));\n\n    ws().send('GetSystem');\n  }\n\n  render() {\n    return (\n      <figure className=\"Container\">\n        <figcaption>\n          System Info\n        </figcaption>\n        <div className=\"Item\">\n          <p style={{ float: 'left' }}>CPU Usage</p>\n          <p style={{ float: 'right' }}>\n            {this.state.systeminfo.cpuUsage}\n            %\n          </p>\n        </div>\n        <hr />\n        <div className=\"Item\">\n          <p style={{ float: 'left' }}>Memory Usage</p>\n          <p style={{ float: 'right' }}>\n            {this.state.systeminfo.usedMemory}\n            GB\n            /\n            {this.state.systeminfo.totalMemory}\n            GB\n          </p>\n        </div>\n        <div className=\"MemProgressBar\">\n          <div className=\"MemProgressBarInner\" style={{ width: (`${100 - Math.floor(this.state.systeminfo.freeMemPercentage)}%`) }}>\n            {(100 - this.state.systeminfo.freeMemPercentage).toFixed(2)}\n            %\n          </div>\n        </div>\n        <hr />\n      </figure>\n    );\n  }\n}\n\nexport default SystemInfo;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport Main from './Main';\nimport ActiveTabs from './Active_Tabs';\nimport SystemInfo from './SystemInfo';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Main />, document.getElementById('root'));\nReactDOM.render(<ActiveTabs />, document.getElementById('active_tabs_root'));\nReactDOM.render(<SystemInfo />, document.getElementById('system_info_root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}